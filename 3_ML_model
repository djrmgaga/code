#로지스틱 회귀 

​

from sklearn.linear_model import LogisticRegression

from sklearn.metrics import confusion_matrix

from sklearn.metrics import classification_report

​

# Train, Test  데이터셋 추출 및 비율 할당 

from sklearn.model_selection import train_test_split

​

X = df1.drop('Churn', axis=1).values

y = df1['Churn'].values

​

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

​

print(X_train.shape, y_train.shape)

​

#분류기 성능평가 1) score

model = LogisticRegression(C=1.0,max_iter=5000).fit(X_train, y_train)

​

#분류기 성능평가 2) confusion_matrix 

model.score(X_test, y_test)

​

# 분류기 성능평가 3) classification_report

pred = model.predict(X_test)

confusion_matrix(y_test, pred)

print(classification_report(y_test, pred, target_names=['class 0', 'class 1']))

​

# 결정트리

​

from sklearn.tree import DecisionTreeClassifier

clf = DecisionTreeClassifier(max_depth=10, random_state=42)

clf.fit(X_train, y_train)

clf.score(X_test, y_test)

​

​

# Decision Tree Regressor 모델

regressor = DecisionTreeRegressor(max_depth=10, random_state=42)

regressor.fit(X_train, y_train)

​

# 테스트 데이터에 대한 예측

y_pred = dt.predict(X_valid)

​

# MAE 계산

from sklearn.metrics import mean_absolute_error

​

mae = mean_absolute_error(y_valid, y_pred)

​

print("Mean Absolute Error (MAE):", mae)

​

# 랜덤포레스트 

from sklearn.ensemble import RandomForestClassifier

rfc = RandomForestClassifier(n_estimators=100, random_state=42)

rfc.fit(X_train, y_train)

rfc.score(X_test, y_test)

​

# 선형회귀 

​

from sklearn.linear_model import LinearRegression

x_data = np.array([1.6, 2.3, 3.5, 4.6]).reshape(-1,1)

y_data = np.array([3.3, 5.5, 7.2, 9.9])

lr = LinearRegression()

lr.fit(x_data, y_data)

lr.score(x_data, y_data)

lr.predict([[5]])
